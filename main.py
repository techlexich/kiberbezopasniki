from fastapi import FastAPI, HTTPException, Depends, status, Request, UploadFile, File, Form
from fastapi.exceptions import RequestValidationError
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse, FileResponse, PlainTextResponse, RedirectResponse
from pydantic import BaseModel, EmailStr, field_validator, AnyUrl, Field
from passlib.context import CryptContext
from jose import JWTError, jwt
from typing import Optional
import psycopg2
from psycopg2.extras import RealDictCursor
import os
from dotenv import load_dotenv
from pathlib import Path
from starlette.middleware.base import BaseHTTPMiddleware
import logging
import boto3
from botocore.exceptions import NoCredentialsError, ClientError
import uuid
import shutil
import requests
from requests_aws4auth import AWS4Auth
from datetime import datetime, timedelta
import hashlib
import base64
from botocore.exceptions import ClientError
from slugify import slugify
from PIL import Image
from PIL.ExifTags import TAGS, GPSTAGS
import io


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏i
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
SECRET_KEY = os.getenv("SECRET_KEY", "fallback-secret-key-for-dev")
DB_URL = os.getenv("AUTH_DATABASE_URL")
BEGET_S3_ENDPOINT = os.getenv("BEGET_S3_ENDPOINT", "")
BEGET_S3_BUCKET_NAME = os.getenv("BEGET_S3_BUCKET_NAME", "")
BEGET_S3_ACCESS_KEY = os.getenv("BEGET_S3_ACCESS_KEY", "")
BEGET_S3_SECRET_KEY = os.getenv("BEGET_S3_SECRET_KEY", "")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")
CITY = "Ekaterinburg"

PHOTO_TIPS: dict[str, dict[str, list[str]]] = {
    "clear": {
        "day": [
            "–Ø—Ä–∫–æ–µ —Å–æ–ª–Ω—Ü–µ üåû - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–ª–µ–Ω–¥—É –æ–±—ä–µ–∫—Ç–∏–≤–∞ –∏ –ø–æ–ª—è—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –Ω–∞—Å—ã—â–µ–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤. ISO 100, f/8-f/11.",
            "–†–µ–∑–∫–∏–µ —Ç–µ–Ω–∏? –°–Ω–∏–º–∞–π—Ç–µ –≤ —Ä–µ–∂–∏–º–Ω–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç—Ä–∞–∂–∞—Ç–µ–ª—å. –í—ã–¥–µ—Ä–∂–∫–∞ 1/250-1/1000.",
            "–ö–æ–Ω—Ç—Ä–æ–≤–æ–π —Å–≤–µ—Ç —Å–æ–∑–¥–∞—ë—Ç –∫—Ä–∞—Å–∏–≤—ã–µ –±–ª–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ f/2.8 –¥–ª—è –±–æ–∫–µ. –ó–æ–ª–æ—Ç–æ–π —á–∞—Å –≤ {sunset}!",
            "–°–æ–ª–Ω–µ—á–Ω–æ - –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–µ–π–∑–∞–∂–µ–π —Å –≥–ª—É–±–æ–∫–æ–π —Ä–µ–∑–∫–æ—Å—Ç—å—é. –î–∏–∞—Ñ—Ä–∞–≥–º–∞ f/11-f/16, —à—Ç–∞—Ç–∏–≤ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á/–± —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é - –∫–æ–Ω—Ç—Ä–∞—Å—Ç —Ç–µ–Ω–µ–π –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–Ω–æ. ISO 200-400."
        ],
        "night": [
            "–ó–≤—ë–∑–¥–Ω–æ–µ –Ω–µ–±–æ? –®–∏—Ä–æ–∫–æ—É–≥–æ–ª—å–Ω–∏–∫, f/2.8, –≤—ã–¥–µ—Ä–∂–∫–∞ 15-30 —Å–µ–∫, ISO 1600-3200. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à—Ç–∞—Ç–∏–≤!",
            "–õ—É–Ω–∞ –æ—Å–≤–µ—â–∞–µ—Ç –ø–µ–π–∑–∞–∂? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–¥–µ—Ä–∂–∫—É 1/125, f/5.6, ISO 400.",
            "–ì–æ—Ä–æ–¥—Å–∫–∏–µ –æ–≥–Ω–∏ –Ω–æ—á—å—é - f/8, –≤—ã–¥–µ—Ä–∂–∫–∞ 2-5 —Å–µ–∫, –Ω–∏–∑–∫–∏–π ISO –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —à—É–º–æ–≤.",
            "–°–≤–µ—Ç–æ–≤–∞—è –∂–∏–≤–æ–ø–∏—Å—å! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ —à—Ç–∞—Ç–∏–≤, –≤—ã–¥–µ—Ä–∂–∫–∞ 10-30 —Å–µ–∫, —Ä–∏—Å—É–π—Ç–µ —Ñ–æ–Ω–∞—Ä—ë–º."
        ]
    },
    "clouds": {
        "day": [
            "–ú—è–≥–∫–∏–π —Å–≤–µ—Ç ‚òÅÔ∏è - –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤. f/2.8-f/5.6, –≤—ã–¥–µ—Ä–∂–∫–∞ 1/125-1/250. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ö–æ–ª–æ–¥–Ω—ã–µ —Ç–æ–Ω–∞.",
            "–û–±–ª–∞–∫–∞ –∫–∞–∫ –≥–∏–≥–∞–Ω—Ç—Å–∫–∏–π —Å–æ—Ñ—Ç–±–æ–∫—Å! –û—Ç–ª–∏—á–Ω–æ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∫–∏. f/8-f/11, ISO 200-400.",
            "–ü–∞—Å–º—É—Ä–Ω–æ - –≤—Ä–µ–º—è –¥–ª—è moody-—Ñ–æ—Ç–æ. +1EV —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏, —Ç—ë–ø–ª—ã–π –±–∞–ª–∞–Ω—Å –±–µ–ª–æ–≥–æ.",
            "–°–µ—Ä–∞—è –ø–æ–≥–æ–¥–∞? –ò—â–∏—Ç–µ —è—Ä–∫–∏–µ –∞–∫—Ü–µ–Ω—Ç—ã - –∑–æ–Ω—Ç—ã, –≤–∏—Ç—Ä–∏–Ω—ã, —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–µ–∂–¥—ã.",
            "–†–∞—Å—Å–µ—è–Ω–Ω—ã–π —Å–≤–µ—Ç - —Å–Ω–∏–º–∏—Ç–µ –ª–µ—Å–Ω—ã–µ –ø–µ–π–∑–∞–∂–∏ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤ —Ç–µ–Ω—è—Ö. f/8, +0.7EV."
        ],
        "night": [
            "–û–±–ª–∞—á–Ω–æ–µ –Ω–µ–±–æ –Ω–æ—á—å—é –æ—Ç—Ä–∞–∂–∞–µ—Ç –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å–≤–µ—Ç - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–ª–∏–Ω–Ω—É—é –≤—ã–¥–µ—Ä–∂–∫—É 5-10 —Å–µ–∫.",
            "–¢—ë–º–Ω—ã–µ –æ–±–ª–∞–∫–∞ —Å–æ–∑–¥–∞—é—Ç –¥—Ä–∞–º–∞—Ç–∏—á–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –Ω–æ—á–Ω–æ–π —Å—ä—ë–º–∫–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã."
        ]
    },
    "rain": {
        "day": [
            "–î–æ–∂–¥—å üåß - –∑–∞—â–∏—Ç–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–æ–Ω—Ç –∏–ª–∏ –¥–æ–∂–¥–µ–≤–∏–∫ –¥–ª—è –∫–∞–º–µ—Ä—ã. f/5.6, –≤—ã–¥–µ—Ä–∂–∫–∞ 1/125.",
            "–ö–∞–ø–ª–∏ –Ω–∞ —Å—Ç–µ–∫–ª–µ - –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –º–∞–∫—Ä–æ—Å—ä—ë–º–∫–∏. f/2.8, –≤—ã–¥–µ—Ä–∂–∫–∞ 1/250, ISO 400.",
            "–ú–æ–∫—Ä—ã–µ —É–ª–∏—Ü—ã –æ—Ç—Ä–∞–∂–∞—é—Ç —Å–≤–µ—Ç - –∏—â–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è. f/8, –≤—ã–¥–µ—Ä–∂–∫–∞ 1/60.",
            "–î–æ–∂–¥—å —Å–æ–∑–¥–∞—ë—Ç –º—è–≥–∫–∏–π —Å–≤–µ—Ç - –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ —Å —ç–º–æ—Ü–∏—è–º–∏.",
            "–°–Ω–∏–º–∞–π—Ç–µ —á–µ—Ä–µ–∑ –æ–∫–Ω–æ —Å –∫–∞–ø–ª—è–º–∏ –¥–æ–∂–¥—è –¥–ª—è —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞."
        ],
        "night": [
            "–ù–æ—á–Ω–æ–π –¥–æ–∂–¥—å - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª–∏–Ω–Ω—É—é –≤—ã–¥–µ—Ä–∂–∫—É 1-2 —Å–µ–∫ –¥–ª—è —Å—ä—ë–º–∫–∏ —Å–≤–µ—Ç–æ–≤—ã—Ö –ø–æ–ª–æ—Å –æ—Ç —Ñ–æ–Ω–∞—Ä–µ–π.",
            "–ú–æ–∫—Ä—ã–π –∞—Å—Ñ–∞–ª—å—Ç –æ—Ç—Ä–∞–∂–∞–µ—Ç –æ–≥–Ω–∏ –≥–æ—Ä–æ–¥–∞ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∏–∑–∫–∏–π —É–≥–æ–ª —Å—ä—ë–º–∫–∏."
        ]
    },
    "snow": {
        "day": [
            "–°–Ω–µ–≥ ‚ùÑÔ∏è - —É–≤–µ–ª–∏—á—å—Ç–µ —ç–∫—Å–ø–æ–∑–∏—Ü–∏—é –Ω–∞ +1EV –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –±–µ–ª–æ–≥–æ. f/8, ISO 200.",
            "–°–Ω–µ–∂–∏–Ω–∫–∏ –∫—Ä—É–ø–Ω—ã–º –ø–ª–∞–Ω–æ–º - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–∫—Ä–æ–æ–±—ä–µ–∫—Ç–∏–≤. f/2.8, –≤—ã–¥–µ—Ä–∂–∫–∞ 1/500.",
            "–ó–∏–º–Ω–∏–µ –ø–µ–π–∑–∞–∂–∏ –ª—É—á—à–µ —Å–Ω–∏–º–∞—Ç—å –≤ –≥–æ–ª—É–±–æ–π —á–∞—Å. –®—Ç–∞—Ç–∏–≤ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!",
            "–°–Ω–µ–≥–æ–ø–∞–¥ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–¥–µ—Ä–∂–∫—É 1/125-1/250 –¥–ª—è –∑–∞–º–æ—Ä–æ–∑–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è —Å–Ω–µ–∂–∏–Ω–æ–∫.",
            "–ò—â–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç—ã: –∫—Ä–∞—Å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ –±–µ–ª–æ–º —Å–Ω–µ–≥—É —Å–º–æ—Ç—Ä—è—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç–Ω–æ."
        ],
        "night": [
            "–°–Ω–µ–≥ –Ω–æ—á—å—é –æ—Ç—Ä–∞–∂–∞–µ—Ç —Å–≤–µ—Ç - –º–æ–∂–Ω–æ —Å–Ω–∏–º–∞—Ç—å —Å –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–º ISO. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ 30 —Å–µ–∫ –≤—ã–¥–µ—Ä–∂–∫–∏.",
            "–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –æ–≥–Ω–∏ –≤ —Å–Ω–µ–≥—É - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∞–ª–∞–Ω—Å –±–µ–ª–æ–≥–æ –Ω–∞ 3000K –¥–ª—è —Ç—ë–ø–ª—ã—Ö —Ç–æ–Ω–æ–≤."
        ]
    },
    "fog": {
        "day": [
            "–¢—É–º–∞–Ω üå´ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω—É—é —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫—É. f/5.6-f/8 –¥–ª—è –≥–ª—É–±–∏–Ω—ã.",
            "–°–∏–ª—É—ç—Ç—ã –≤ —Ç—É–º–∞–Ω–µ - —ç–∫—Å–ø–æ–Ω–∏—Ä—É–π—Ç–µ –ø–æ —Å–≤–µ—Ç–ª—ã–º —É—á–∞—Å—Ç–∫–∞–º. –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å +20 –≤ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–µ.",
            "–¢—É–º–∞–Ω —Å–º—è–≥—á–∞–µ—Ç —Ñ–æ–Ω - –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ —Å —Ä–∞–∑–º—ã—Ç–∏–µ–º.",
            "–ò—â–∏—Ç–µ –æ–¥–∏–Ω–æ–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Ç—É–º–∞–Ω–µ - –¥–µ—Ä–µ–≤—å—è, —Ñ–æ–Ω–∞—Ä–∏, –∑–¥–∞–Ω–∏—è.",
            "–¢—É–º–∞–Ω + –ª–µ—Å = –≥–æ—Ç–æ–≤—ã–π –∫–∞–¥—Ä –≤ —Å—Ç–∏–ª–µ —Ñ—ç–Ω—Ç–µ–∑–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ö–æ–ª–æ–¥–Ω—ã–µ —Ç–æ–Ω–∞."
        ],
        "night": [
            "–¢—É–º–∞–Ω –Ω–æ—á—å—é —Ä–∞—Å—Å–µ–∏–≤–∞–µ—Ç —Å–≤–µ—Ç - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∏–º–∞—Ç—å —Å–≤–µ—Ç–æ–≤—ã–µ —Å—Ç–æ–ª–±—ã –æ—Ç —Ñ–æ–Ω–∞—Ä–µ–π.",
            "–ì–æ—Ä–æ–¥ –≤ —Ç—É–º–∞–Ω–µ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∞–ª–∞–Ω—Å –±–µ–ª–æ–≥–æ –Ω–∞ 4000K –¥–ª—è —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."
        ]
    },
    "thunderstorm": {
        "day": [
            "–ì—Ä–æ–∑–∞ ‚ö° - –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã! –°–Ω–∏–º–∞–π—Ç–µ –∏–∑ —É–∫—Ä—ã—Ç–∏—è. –î–ª–∏–Ω–Ω–∞—è –≤—ã–¥–µ—Ä–∂–∫–∞ 10-30 —Å–µ–∫ –¥–ª—è –º–æ–ª–Ω–∏–π.",
            "–î—Ä–∞–º–∞—Ç–∏—á–Ω–æ–µ –Ω–µ–±–æ –ø–µ—Ä–µ–¥ –≥—Ä–æ–∑–æ–π - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π ND-—Ñ–∏–ª—å—Ç—Ä.",
            "–ü–æ—Å–ª–µ –¥–æ–∂–¥—è - –∏—â–∏—Ç–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –≤ –ª—É–∂–∞—Ö. f/8, –≤—ã–¥–µ—Ä–∂–∫–∞ 1/125."
        ],
        "night": [
            "–ù–æ—á–Ω–∞—è –≥—Ä–æ–∑–∞ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É–ª—å—Ç –î–£ –∏ —à—Ç–∞—Ç–∏–≤. –í—ã–¥–µ—Ä–∂–∫–∞ BULB –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –º–æ–ª–Ω–∏–π.",
            "–ú–æ–ª–Ω–∏–∏ –Ω–∞ —Ñ–æ–Ω–µ –≥–æ—Ä–æ–¥–∞ - —Ñ–æ–∫—É—Å –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å, ISO 400."
        ]
    }
}

CAMERA_SETTINGS_TIPS = {
    "clear": "–°–æ–≤–µ—Ç: –ü—Ä–∏ —è—Ä–∫–æ–º —Å–æ–ª–Ω—Ü–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ND-—Ñ–∏–ª—å—Ç—Ä –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –≤—ã–¥–µ—Ä–∂–µ–∫",
    "clouds": "–°–æ–≤–µ—Ç: –ü—Ä–∏ –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å ISO –¥–æ 400-800 –±–µ–∑ —Å–∏–ª—å–Ω—ã—Ö —à—É–º–æ–≤",
    "rain": "–°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–ª–µ–Ω–¥—É –¥–ª—è –∑–∞—â–∏—Ç—ã –ª–∏–Ω–∑—ã –æ—Ç –∫–∞–ø–µ–ª—å –¥–æ–∂–¥—è",
    "snow": "–°–æ–≤–µ—Ç: –î–µ—Ä–∂–∏—Ç–µ –∑–∞–ø–∞—Å–Ω—ã–µ –±–∞—Ç–∞—Ä–µ–∏ –≤ —Ç–µ–ø–ª–µ - –Ω–∞ —Ö–æ–ª–æ–¥–µ –æ–Ω–∏ —Ä–∞–∑—Ä—è–∂–∞—é—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ",
    "fog": "–°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–ª–µ–Ω–¥—É –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –±–ª–∏–∫–æ–≤ –æ—Ç –≤–ª–∞–∂–Ω–æ–≥–æ –≤–æ–∑–¥—É—Ö–∞",
    "thunderstorm": "–°–æ–≤–µ—Ç: –ó–∞—â–∏—Ç–∏—Ç–µ –∫–∞–º–µ—Ä—É –¥–æ–∂–¥–µ–≤—ã–º —á–µ—Ö–ª–æ–º –∏–ª–∏ –ø–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–º –ø–∞–∫–µ—Ç–æ–º",
    "default": "–°–æ–≤–µ—Ç: –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—ã–µ —Ä–∞–∫—É—Ä—Å—ã"
}



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

s3 = boto3.client(
    's3',
    endpoint_url=BEGET_S3_ENDPOINT,
    aws_access_key_id=BEGET_S3_ACCESS_KEY,
    aws_secret_access_key=BEGET_S3_SECRET_KEY,
    region_name='ru-1',
    config=boto3.session.Config(
        signature_version='s3v4',
        s3={'addressing_style': 'path'}
    )
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ S3
if not all([BEGET_S3_ENDPOINT, BEGET_S3_BUCKET_NAME, BEGET_S3_ACCESS_KEY, BEGET_S3_SECRET_KEY]):
    logger.error("S3 credentials not configured")
    raise HTTPException(500, "S3 storage not configured")



# –ú–æ–¥–µ–ª–∏

async def upload_to_s3(file: UploadFile, folder: str) -> str:
    try:
        file_content = await file.read()
        file_ext = file.filename.split('.')[-1].lower()
        file_name = f"{folder}/{uuid.uuid4()}.{file_ext}"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º put_object –≤–º–µ—Å—Ç–æ upload_fileobj
        s3.put_object(
            Bucket=BEGET_S3_BUCKET_NAME,
            Key=file_name,
            Body=file_content,
            ContentType=file.content_type,
            ACL='public-read'
        )
        
        return f"{BEGET_S3_ENDPOINT}/{BEGET_S3_BUCKET_NAME}/{file_name}"
    except Exception as e:
        logger.error(f"Upload error: {str(e)}", exc_info=True)
        raise HTTPException(500, f"Failed to upload file: {str(e)}")
    finally:
        await file.seek(0)

# –ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ API
class Post(BaseModel):
    id: int
    latitude: float
    altitude: float
    likes_count: int
    photo_url: str
    camera_model: Optional[str] = None
    camera_settings: Optional[dict] = None



class UserProfile(BaseModel):
    bio: str = Field(default="", max_length=500)
    avatar: str = Field(default="/default-avatar.jpg")

    @field_validator('avatar')
    def validate_avatar(cls, v):
        if not v.startswith(('http://', 'https://', '/')):
            raise ValueError("Avatar –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å URL –∏–ª–∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å /")
        return v

class User(BaseModel):
    id: int
    username: str
    email: str
    profile: UserProfile = UserProfile()

class UserCreate(BaseModel):
    email: EmailStr
    username: str
    password: str
    password_repeat: str

    @field_validator('password_repeat')
    def passwords_match(cls, v, info):
        if v != info.data['password']:
            raise ValueError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')
        return v

class Token(BaseModel):
    access_token: str
    token_type: str

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (new)
def get_db():
    conn = psycopg2.connect(
        dbname="auth_db_17at_90uu",
        user="auth_db_17at_user",
        password="rOK6TE8lX6zIisiF2E2siOmbGPnpUGxI",
        host="dpg-d0qvflje5dus739v4q50-a.oregon-postgres.render.com",
        port="5432",
        cursor_factory=RealDictCursor,
        sslmode="require"  
    )
    try:
        yield conn
    finally:
        conn.close()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def extract_exif_data(image_bytes: bytes) -> dict:
    try:
        image = Image.open(io.BytesIO(image_bytes))
        
        if not hasattr(image, '_getexif') or image._getexif() is None:
            return {}
        
        exif_data = {
            TAGS.get(tag, tag): value
            for tag, value in image._getexif().items()
        }
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ GPS –¥–∞–Ω–Ω—ã—Ö
        if 'GPSInfo' in exif_data:
            gps_info = {
                GPSTAGS.get(tag, tag): value
                for tag, value in exif_data['GPSInfo'].items()
            }
            exif_data['GPSInfo'] = gps_info

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        useful_data = {
            'camera_make': exif_data.get('Make', ''),
            'camera_model': exif_data.get('Model', ''),
            'exposure_time': str(exif_data.get('ExposureTime', '')),
            'f_number': f"f/{exif_data.get('FNumber', '')}" if exif_data.get('FNumber') else '',
            'iso': str(exif_data.get('ISOSpeedRatings', '')),
            'focal_length': str(exif_data.get('FocalLength', '')),
            'lens_model': exif_data.get('LensModel', ''),
            'date_time': exif_data.get('DateTimeOriginal', ''),
            'gps_info': exif_data.get('GPSInfo', {})
        }
        
        return {k: v for k, v in useful_data.items() if v}
        
    except Exception as e:
        logger.error(f"EXIF extraction error: {str(e)}")
        return {}


def create_access_token(data: dict):
    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    return jwt.encode({**data, "exp": expire}, SECRET_KEY, algorithm=ALGORITHM)


async def get_user(db, username: str):
    with db.cursor() as cur:
        cur.execute("""
            SELECT id, username, email, password_hash, 
                   COALESCE(bio, '') as bio,
                   COALESCE(av  atar_url, '/default-avatar.jpg') as avatar
            FROM users WHERE username = %s
        """, (username,))
        return cur.fetchone()

async def authenticate_user(db, username: str, password: str):
    user = await get_user(db, username)
    if not user or not pwd_context.verify(password, user["password_hash"]):
        return False
    return user

async def get_current_user(db=Depends(get_db), token: str=Depends(oauth2_scheme)):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user = await get_user(db, payload["sub"])
        if not user:
            raise HTTPException(status_code=401, detail="Invalid credentials")
        return user
    except JWTError:
        raise HTTPException(status_code=401, detail="Invalid token")

# –†–æ—É—Ç—ã
@app.post("/register", response_model=User)
async def register(user: UserCreate, db=Depends(get_db)):
    with db.cursor() as cur:
        cur.execute("SELECT * FROM users WHERE email = %s OR username = %s", 
                   (user.email, user.username))
        if cur.fetchone():
            raise HTTPException(400, "Email –∏–ª–∏ username —É–∂–µ –∑–∞–Ω—è—Ç—ã")
        
        hashed = pwd_context.hash(user.password)
        cur.execute("""
            INSERT INTO users (email, username, password_hash)
            VALUES (%s, %s, %s)
            RETURNING id, username, email
        """, (user.email, user.username, hashed))
        new_user = cur.fetchone()
        db.commit()
        return {**new_user, "profile": {"bio": "", "avatar": "/default-avatar.jpg"}}

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    errors = exc.errors()
    for error in errors:
        if error["type"] == "value_error.email":
            return JSONResponse(
                status_code=400,
                content={"detail": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email"},
            )
    return JSONResponse(
        status_code=400,
        content={"detail": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"},
    )
    
@app.put("/users/{username}", response_model=User)
async def update_user_profile(
    username: str,
    avatar: Optional[UploadFile] = File(None),
    bio: str = Form(default=""),
    db=Depends(get_db),
    current_user=Depends(get_current_user)
):
    if current_user["username"] != username:
        raise HTTPException(403, "You can update only your own profile")
    
    avatar_url = current_user["avatar"]

    if avatar:
        
        if avatar.content_type not in ALLOWED_TYPES:
            raise HTTPException(400, "Unsupported file type. Only JPEG, PNG and WebP are allowed")
        try:
            avatar_url = await upload_to_s3(avatar, "avatars")
        except Exception as e:
            logger.error(f"Avatar upload error: {str(e)}")
            raise HTTPException(500, "Failed to upload avatar")

    with db.cursor() as cur:
        cur.execute("""
            UPDATE users 
            SET bio = %s, avatar_url = %s
            WHERE username = %s
            RETURNING id, username, email, bio, avatar_url
        """, (bio, avatar_url, username))
        updated_user = cur.fetchone()
        db.commit()
        
        if not updated_user:
            raise HTTPException(404, "User not found")
        
        return {
            "id": updated_user["id"],
            "username": updated_user["username"],
            "email": updated_user["email"],
            "profile": {
                "bio": updated_user["bio"],
                "avatar": updated_user["avatar_url"]
            }
        }
        
        
        
@app.get("/weather-message")
async def get_weather_message():
    weather_data = await fetch_weather()
    if not weather_data:
        return {"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."}
    
    message = generate_photographer_message(weather_data)
    return {
        "message": message,
        "weather_data": weather_data,
        "camera_tip": get_camera_tip(weather_data)
    }

async def fetch_weather():
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={CITY}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()
        
        if response.status_code != 200:
            print("–û—à–∏–±–∫–∞ API –ø–æ–≥–æ–¥—ã:", data.get("message", "Unknown error"))
            return None
        
        return {
            "temp": data["main"]["temp"],
            "condition": data["weather"][0]["description"],
            "sunset": datetime.fromtimestamp(data["sys"]["sunset"]).strftime("%H:%M"),
            "sunrise": datetime.fromtimestamp(data["sys"]["sunrise"]).strftime("%H:%M"),
            "humidity": data["main"]["humidity"],
            "clouds": data["clouds"]["all"],
            "wind": data["wind"]["speed"],
            "time": datetime.now().strftime("%H:%M")
        }
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã:", e)
        return None

def get_time_of_day(sunset: str, sunrise: str) -> str:
    now = datetime.now().strftime("%H:%M")
    return "night" if now > sunset or now < sunrise else "day"

def get_weather_key(condition: str) -> str:
    condition = condition.lower()
    if "—è—Å–Ω–æ" in condition or "clear" in condition:
        return "clear"
    elif "–æ–±–ª–∞—á–Ω–æ" in condition or "clouds" in condition:
        return "clouds"
    elif "–¥–æ–∂–¥—å" in condition or "rain" in condition:
        return "rain"
    elif "—Å–Ω–µ–≥" in condition or "snow" in condition:
        return "snow"
    elif "—Ç—É–º–∞–Ω" in condition or "fog" in condition:
        return "fog"
    elif "–≥—Ä–æ–∑–∞" in condition or "thunderstorm" in condition:
        return "thunderstorm"
    return "default"

def get_camera_tip(weather: dict) -> str:
    weather_key = get_weather_key(weather["condition"])
    return CAMERA_SETTINGS_TIPS.get(weather_key, CAMERA_SETTINGS_TIPS["default"])

def generate_photographer_message(weather: dict) -> str:
    weather_key = get_weather_key(weather["condition"])
    time_of_day = get_time_of_day(weather["sunset"], weather["sunrise"])
    
    if weather_key not in PHOTO_TIPS or time_of_day not in PHOTO_TIPS[weather_key]:
        weather_key = "default"
        time_of_day = "day"
    
    tips = PHOTO_TIPS.get(weather_key, {}).get(time_of_day, 
             PHOTO_TIPS["clear"]["day"])  # fallback
    
    chosen_tip = random.choice(tips)
    return chosen_tip.format(
        sunset=weather["sunset"],
        sunrise=weather["sunrise"],
        temp=weather["temp"]
    )
    
    
    

@app.post("/token", response_model=Token)
async def login(form_data: OAuth2PasswordRequestForm=Depends(), db=Depends(get_db)):
    user = await authenticate_user(db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(401, "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    return {
        "access_token": create_access_token({"sub": user["username"]}),
        "token_type": "bearer"
    }

@app.get("/users/me", response_model=User)
async def read_me(request: Request, user=Depends(get_current_user)):
    avatar = user["avatar"]
    if avatar.startswith('/'):
        avatar = str(request.base_url)[:-1] + avatar
        
    return {
        "id": user["id"],
        "username": user["username"],
        "email": user["email"],
        "profile": {
            "bio": user["bio"],
            "avatar": avatar
        }
    }



@app.get("/points", response_model=list[Post])
def get_points(limit: int = 10):
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        conn = psycopg2.connect(
            dbname="auth_db_17at",
            user="auth_db_17at_user",
            password="eGFSjcl2O29bWJBCAcRdh4MIzjNFojNZ",
            host="dpg-d05lfk2li9vc738u4vb0-a.oregon-postgres.render.com",
            port="5432",
            cursor_factory=RealDictCursor
        )
        
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT id, latitude, altitude, 
                       likes_count, photo_url
                FROM posts 
                ORDER BY likes_count DESC 
                LIMIT %s
            """, (limit,))
            
            posts = cursor.fetchall()
        
        conn.close()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ float
        for post in posts:
            post["latitude"] = float(post["latitude"])
            post["altitude"] = float(post["altitude"])
        
        return posts
    
    except Exception as e:
        raise HTTPException(500, detail=f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    

@app.get("/users/{username}", response_model=User)
async def get_user_profile(username: str, request: Request, db=Depends(get_db)):
    user = await get_user(db, username)
    if not user:
        raise HTTPException(404, "User not found")
    
    avatar = user["avatar"]
    if avatar.startswith('/'):
        avatar = str(request.base_url)[:-1] + avatar
        
    return {
        "id": user["id"],
        "username": user["username"],
        "email": user["email"],
        "profile": {
            "bio": user["bio"],
            "avatar": avatar
        }
    }

logger = logging.getLogger(__name__)
@app.post("/posts")
async def create_post(
    photo: UploadFile = File(...),
    description: str = Form(default=""),
    altitude: str = Form(...),
    latitude: str = Form(...),
    camera_model: str = Form(...),
    exposure: str = Form(default=""),
    aperture: str = Form(default=""),
    iso: str = Form(default=""),
    db=Depends(get_db),
    current_user=Depends(get_current_user)
):
    if not photo.filename or not photo.content_type:
        raise HTTPException(400, detail="Invalid file")
    
    if photo.content_type not in ALLOWED_TYPES:
        raise HTTPException(400, "Unsupported file type. Only JPEG, PNG and WebP are allowed")
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º EXIF –¥–∞–Ω–Ω—ã–µ
        file_content = await photo.read()
        exif_data = extract_exif_data(file_content)
        await photo.seek(0)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ
        photo_url = await upload_to_s3(photo, "posts")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã
        camera_settings = {
            "model": camera_model,
            "exposure": exposure or exif_data.get("exposure_time", ""),
            "aperture": aperture or exif_data.get("f_number", ""),
            "iso": iso or exif_data.get("iso", ""),
            "focal_length": exif_data.get("focal_length", ""),
            "lens": exif_data.get("lens_model", "")
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        with db.cursor() as cur:
            cur.execute("""
                INSERT INTO posts (
                    photo_url, description, user_id, created_at,
                    likes_count, comments_count, altitude, latitude,
                    camera_model, camera_settings
                ) VALUES (
                    %s, %s, %s, NOW(), 0, 0, %s, %s, %s, %s
                )
                RETURNING id, created_at
            """, (
                photo_url, 
                description, 
                current_user["id"],
                altitude, 
                latitude, 
                camera_model,
                json.dumps(camera_settings),
            ))
            new_post = cur.fetchone()
            db.commit()

        return {
            "status": "success",
            "url": photo_url,
            "post_id": new_post["id"],
            "camera_info": camera_settings
        }

    except Exception as e:
        logger.error(f"Post creation error: {str(e)}", exc_info=True)
        raise HTTPException(500, detail=f"Failed to create post: {str(e)}")

@app.get("/profile/{username}")
async def profile_page(username: str, db=Depends(get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(db, username)
    if not user:
        raise HTTPException(status_code=404)
    return FileResponse("static/profile.html")

@app.get("/tape", response_class=HTMLResponse)
async def tape(request: Request):
    return templates.TemplateResponse("tape.html", {"request": request})

@app.get("/", response_class=HTMLResponse)
async def root(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

@app.get("/users/{username}/posts")
async def get_user_posts(
    username: str,
    skip: int = 0,
    limit: int = 10,
    db=Depends(get_db)
):
    with db.cursor() as cur:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cur.execute("SELECT id FROM users WHERE username = %s", (username,))
        user = cur.fetchone()
        if not user:
            raise HTTPException(404, "User not found")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cur.execute("SELECT COUNT(*) FROM posts WHERE user_id = %s", (user["id"],))
        total_posts = cur.fetchone()["count"]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cur.execute("""
            SELECT p.*, u.username, u.avatar_url as user_avatar
            FROM posts p
            JOIN users u ON p.user_id = u.id
            WHERE p.user_id = %s
            ORDER BY p.created_at DESC
            LIMIT %s OFFSET %s
        """, (user["id"], limit, skip))
        posts = cur.fetchall()
        
        return {
            "posts": posts,
            "total": total_posts,
            "skip": skip,
            "limit": limit
        }

@app.delete("/posts/{post_id}")
async def delete_post(
    post_id: int,
    db=Depends(get_db),
    current_user=Depends(get_current_user)
):
    with db.cursor() as cur:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        cur.execute("""
            SELECT id, user_id, photo_url FROM posts WHERE id = %s
        """, (post_id,))
        post = cur.fetchone()
        
        if not post:
            raise HTTPException(404, "Post not found")
        
        if post["user_id"] != current_user["id"]:
            raise HTTPException(403, "You can delete only your own posts")
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ S3
        try:
            if post["photo_url"].startswith(os.getenv("BEGET_S3_ENDPOINT")):
                file_name = post["photo_url"].split('/')[-1]
                s3.delete_object(
                    Bucket=os.getenv("S3_BUCKET_NAME"),
                    Key=file_name
                )
        except Exception as e:
            logger.error(f"Error deleting file from S3: {str(e)}")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç –∏–∑ –ë–î
        cur.execute("DELETE FROM posts WHERE id = %s RETURNING id", (post_id,))
        deleted_post = cur.fetchone()
        db.commit()
        
        if not deleted_post:
            raise HTTPException(500, "Failed to delete post")
        
        return {"status": "ok", "post_id": post_id}

@app.get("/posts/{post_id}/{optional_slug}")
async def get_post(
    post_id: int,
    optional_slug: Optional[str] = None,
    db=Depends(get_db)
):
    with db.cursor() as cur:
        cur.execute("""
            SELECT p.*, u.username, u.avatar_url as user_avatar
            FROM posts p
            JOIN users u ON p.user_id = u.id
            WHERE p.id = %s
        """, (post_id,))
        post = cur.fetchone()
        if not post:
            raise HTTPException(404, "Post not found")

        # –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ URL —Å slug, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not optional_slug:
            slug = slugify(post["description"]) if post["description"] else f"post-{post_id}"
            return RedirectResponse(f"/posts/{post_id}/{slug}")

        return post

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ª–∞–π–∫–∞ –ø–æ—Å—Ç–∞
@app.post("/posts/{post_id}/like")
async def like_post(
    post_id: int,
    db=Depends(get_db),
    current_user=Depends(get_current_user)
):
    try:
        with db.cursor() as cur:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ—Å—Ç
            cur.execute("SELECT id FROM posts WHERE id = %s", (post_id,))
            if not cur.fetchone():
                raise HTTPException(404, "Post not found")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ª–∞–π–∫–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            cur.execute("""
                SELECT id FROM likes 
                WHERE user_id = %s AND post_id = %s
            """, (current_user["id"], post_id))
            
            if cur.fetchone():
                raise HTTPException(400, "You already liked this post")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫
            cur.execute("""
                INSERT INTO likes (user_id, post_id)
                VALUES (%s, %s)
            """, (current_user["id"], post_id))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤
            cur.execute("""
                UPDATE posts 
                SET likes_count = likes_count + 1 
                WHERE id = %s
                RETURNING likes_count
            """, (post_id,))
            
            updated_count = cur.fetchone()["likes_count"]
            db.commit()
            
            return {"status": "success", "likes_count": updated_count}
    except Exception as e:
        db.rollback()
        raise HTTPException(500, detail=f"Database error: {str(e)}")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ª–∞–π–∫–∞
@app.post("/posts/{post_id}/unlike")
async def unlike_post(
    post_id: int,
    db=Depends(get_db),
    current_user=Depends(get_current_user)
):
    try:
        with db.cursor() as cur:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ—Å—Ç
            cur.execute("SELECT id FROM posts WHERE id = %s", (post_id,))
            if not cur.fetchone():
                raise HTTPException(404, "Post not found")
            
            # –£–¥–∞–ª—è–µ–º –ª–∞–π–∫
            cur.execute("""
                DELETE FROM likes 
                WHERE user_id = %s AND post_id = %s
                RETURNING id
            """, (current_user["id"], post_id))
            
            if not cur.fetchone():
                raise HTTPException(400, "You haven't liked this post yet")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤
            cur.execute("""
                UPDATE posts 
                SET likes_count = likes_count - 1 
                WHERE id = %s
                RETURNING likes_count
            """, (post_id,))
            
            updated_count = cur.fetchone()["likes_count"]
            db.commit()
            
            return {"status": "success", "likes_count": updated_count}
    except Exception as e:
        db.rollback()
        raise HTTPException(500, detail=f"Database error: {str(e)}")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–µ–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤
@app.get("/tape/posts")
async def get_tape_posts(db=Depends(get_db)):
    try:
        with db.cursor() as cur:
            # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏ –Ω–µ—Ç)
            cur.execute("""
                SELECT 
                    p.id,
                    p.photo_url,
                    p.description,
                    p.created_at,
                    p.likes_count,
                    p.comments_count,
                    p.latitude,
                    p.altitude,
                    u.username,
                    u.avatar_url as user_avatar,
                    FALSE as is_liked
                FROM posts p
                JOIN users u ON p.user_id = u.id
                ORDER BY p.created_at DESC
                LIMIT 20
            """)
            
            posts = cur.fetchall()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            for post in posts:
                post['latitude'] = float(post.get('latitude', 0))
                post['altitude'] = float(post.get('altitude', 0))
                post['is_liked'] = bool(post.get('is_liked', False))
            
            return posts
            
    except Exception as e:
        logger.error(f"Error in get_tape_posts: {str(e)}", exc_info=True)
        raise HTTPException(500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–µ–Ω—Ç—ã")

@app.get("/post/{post_id}")
async def get_single_post_page(request: Request, post_id: int, db=Depends(get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
    with db.cursor() as cur:
        cur.execute("""
            SELECT p.*, u.username, u.avatar_url as user_avatar
            FROM posts p
            JOIN users u ON p.user_id = u.id
            WHERE p.id = %s
        """, (post_id,))
        post = cur.fetchone()
        
        if not post:
            raise HTTPException(404, "Post not found")
    
    return templates.TemplateResponse("post.html", {
        "request": request,
        "post": post
    })

@app.get("/check-s3-connection")
async def check_s3_connection():
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–∞–∫–µ—Ç–æ–≤
        response = s3.list_buckets()
        return {"status": "success", "buckets": [b['Name'] for b in response['Buckets']]}
    except Exception as e:
        raise HTTPException(500, f"S3 connection error: {str(e)}")

class NotFoundMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request, call_next):
        response = await call_next(request)
        if response.status_code == 404:
            return FileResponse("static/404.html")
        return response

@app.get("/check-s3")
async def check_s3():
    try:
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–∞–∫–µ—Ç–æ–≤
        response = s3.list_buckets()
        return {
            "status": "success",
            "buckets": [b['Name'] for b in response['Buckets']],
            "bucket_exists": BEGET_S3_BUCKET_NAME in [b['Name'] for b in response['Buckets']]
        }
    except Exception as e:
        logger.error(f"S3 connection error: {str(e)}")
        return {
            "status": "error",
            "error": str(e),
            "details": {
                "endpoint": BEGET_S3_ENDPOINT,
                "bucket": BEGET_S3_BUCKET_NAME,
                "region": "ru-1"
            }
        }

app.add_middleware(NotFoundMiddleware)

#–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
@app.exception_handler(500)
async def internal_server_error_handler(request: Request, exc: Exception):
    return PlainTextResponse("Internal Server Error", status_code=500)

@app.exception_handler(404)
async def not_found_handler(request: Request, exc: Exception):
    return FileResponse("static/404.html", status_code=404)

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)