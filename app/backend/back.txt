from fastapi import FastAPI, UploadFile, File, Form, HTTPException, Depends
from fastapi.security import OAuth2PasswordBearer
from fastapi.middleware.cors import CORSMiddleware
from datetime import datetime, timedelta
from jose import JWTError, jwt
from typing import Optional
import ftplib
import uuid
import os
from dotenv import load_dotenv

load_dotenv()

# Конфигурация
FTP_HOST = os.getenv("FTP_HOST")
FTP_USER = os.getenv("FTP_USER")
FTP_PASS = os.getenv("FTP_PASS")
FTP_UPLOAD_DIR = os.getenv("FTP_UPLOAD_DIR")
SECRET_KEY = os.getenv("SECRET_KEY")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

app = FastAPI()

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# Функция загрузки на FTP
def save_to_ftp(file: UploadFile, description: Optional[str] = None):
    try:
        file_ext = file.filename.split('.')[-1].lower()
        filename = f"{uuid.uuid4()}.{file_ext}"
        
        with ftplib.FTP(FTP_HOST) as ftp:
            ftp.login(FTP_USER, FTP_PASS)
            
            try:
                ftp.mkd(FTP_UPLOAD_DIR)
            except ftplib.error_perm as e:
                if "550" not in str(e):
                    raise

            ftp.cwd(FTP_UPLOAD_DIR)
            ftp.storbinary(f"STOR {filename}", file.file)
            
        return {
            "status": "success",
            "filename": filename,
            "url": f"ftp://{FTP_HOST}{FTP_UPLOAD_DIR}/{filename}",
            "description": description
        }
        
    except Exception as e:
        raise HTTPException(500, detail=f"FTP error: {str(e)}")

# Эндпоинты
@app.post("/upload")
async def upload_file(
    file: UploadFile = File(...),
    description: str = Form(None),
    token: str = Depends(oauth2_scheme)
):
    try:
        jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        return save_to_ftp(file, description)
    except JWTError:
        raise HTTPException(401, detail="Invalid token")

@app.get("/list")
async def list_files():
    try:
        with ftplib.FTP(FTP_HOST) as ftp:
            ftp.login(FTP_USER, FTP_PASS)
            ftp.cwd(FTP_UPLOAD_DIR)
            files = ftp.nlst()
            images = [f for f in files if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
            return {"files": images}
    except Exception as e:
        raise HTTPException(500, detail=str(e))

@app.post("/token")
async def login_for_token(username: str = Form(...), password: str = Form(...)):
    # В реальном приложении проверяйте в базе данных
    if username != "admin" or password != "password":
        raise HTTPException(401, detail="Invalid credentials")
    
    access_token = jwt.encode(
        {"sub": username, "exp": datetime.utcnow() + timedelta(minutes=30)},
        SECRET_KEY,
        algorithm=ALGORITHM
    )
    return {"access_token": access_token, "token_type": "bearer"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)